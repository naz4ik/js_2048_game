{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ], initialScore = 0){\n        this.board = initialState;\n        this.currentBoard = [\n            ...initialState\n        ];\n        this.initialScore = initialScore;\n        this.currentScore = initialScore;\n        this.status = 'idle';\n        this.hasWon = false;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    slideTiles(columns) {\n        for(let col = 0; col < 4; col++){\n            let column = columns[col];\n            column = this.combineTiles(column);\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n    }\n    combineTiles(tiles) {\n        const result = tiles.filter((tile)=>tile !== 0);\n        let scoreChange = 0;\n        for(let i = 0; i < result.length - 1; i++)if (result[i] === result[i + 1]) {\n            result[i] *= 2;\n            result[i + 1] = 0;\n            scoreChange += result[i];\n        }\n        const newTiles = result.filter((tile)=>tile !== 0).concat([\n            0,\n            0,\n            0,\n            0\n        ]).slice(0, 4);\n        this.currentScore += scoreChange;\n        return newTiles;\n    }\n    cellsGroupedByColumn() {\n        const groupedColumns = [\n            [],\n            [],\n            [],\n            []\n        ];\n        for(let col = 0; col < 4; col++)for(let row = 0; row < 4; row++)groupedColumns[col].push(this.board[row][col]);\n        return groupedColumns;\n    }\n    cellsGroupedByRow() {\n        const groupedRows = [\n            [],\n            [],\n            [],\n            []\n        ];\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)groupedRows[row].push(this.board[row][col]);\n        return groupedRows;\n    }\n    moveLeft() {\n        const previousState = JSON.stringify(this.board);\n        const rows = this.cellsGroupedByRow();\n        for(let rowIdx = 0; rowIdx < 4; rowIdx++){\n            let row = rows[rowIdx];\n            row = this.combineTiles(row);\n            this.board[rowIdx] = row;\n        }\n        if (JSON.stringify(this.board) !== previousState) this.addRandomTile();\n    }\n    moveRight() {\n        const previousState = JSON.stringify(this.board);\n        const rows = this.cellsGroupedByRow();\n        for(let rowIdx = 0; rowIdx < 4; rowIdx++){\n            let row = rows[rowIdx].reverse();\n            row = this.combineTiles(row);\n            row.reverse();\n            this.board[rowIdx] = row;\n        }\n        if (JSON.stringify(this.board) !== previousState) this.addRandomTile();\n    }\n    moveUp() {\n        const previousState = JSON.stringify(this.board);\n        const columns = this.cellsGroupedByColumn();\n        for(let col = 0; col < 4; col++){\n            let column = columns[col];\n            column = this.combineTiles(column);\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n        if (JSON.stringify(this.board) !== previousState) this.addRandomTile();\n    }\n    moveDown() {\n        const previousState = JSON.stringify(this.board);\n        const columns = this.cellsGroupedByColumn();\n        for(let col = 0; col < 4; col++){\n            let column = columns[col].reverse();\n            column = this.combineTiles(column);\n            column.reverse();\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n        if (JSON.stringify(this.board) !== previousState) this.addRandomTile();\n    }\n    win() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                this.hasWon = true;\n                return true;\n            }\n        }\n        return false;\n    }\n    canMove() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return true;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return true;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return true;\n        }\n        return false;\n    }\n    getScore() {\n        return this.currentScore;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.currentBoard = JSON.parse(JSON.stringify(this.board));\n        this.currentScore = this.initialScore;\n        this.addRandomTile();\n        this.addRandomTile();\n        this.status = 'playing';\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.currentBoard = JSON.parse(JSON.stringify(this.board));\n        this.currentScore = this.initialScore;\n        this.status = 'idle';\n        this.hasWon = false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\nconst $09e991522ca7e64e$var$gameField = document.querySelector('.game-field');\nconst $09e991522ca7e64e$var$startMessage = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$winMessage = document.querySelector('.message-win');\nfunction $09e991522ca7e64e$var$updateBoardUI() {\n    const rows = $09e991522ca7e64e$var$gameField.querySelectorAll('.field-row');\n    const score = $09e991522ca7e64e$var$game.getScore();\n    document.querySelector('.game-score').textContent = score;\n    $09e991522ca7e64e$var$game.getState().forEach((row, rowIndex)=>{\n        const cells = rows[rowIndex].querySelectorAll('.field-cell');\n        row.forEach((cellValue, colIndex)=>{\n            const cell = cells[colIndex];\n            cell.textContent = '';\n            cell.className = 'field-cell';\n            if (cellValue !== 0) {\n                cell.textContent = cellValue;\n                cell.classList.add(`field-cell--${cellValue}`);\n            }\n        });\n    });\n}\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoardUI($09e991522ca7e64e$var$game);\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n        $09e991522ca7e64e$var$startButton.classList.add('restart');\n        $09e991522ca7e64e$var$startMessage.classList.add('hidden');\n    } else if ($09e991522ca7e64e$var$game.getStatus() === 'playing') {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoardUI($09e991522ca7e64e$var$game);\n        $09e991522ca7e64e$var$startButton.textContent = 'Start';\n        $09e991522ca7e64e$var$startButton.classList.remove('restart');\n        $09e991522ca7e64e$var$winMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$loseMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$startMessage.classList.remove('hidden');\n    }\n});\ndocument.addEventListener('keydown', (keyboardEvent)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    switch(keyboardEvent.key){\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    if ($09e991522ca7e64e$var$game.win()) {\n        if ($09e991522ca7e64e$var$game.hasWon) $09e991522ca7e64e$var$winMessage.classList.remove('hidden');\n    }\n    if (!$09e991522ca7e64e$var$game.canMove()) $09e991522ca7e64e$var$loseMessage.classList.remove('hidden');\n    $09e991522ca7e64e$var$updateBoardUI();\n});\n\n\n//# sourceMappingURL=index.e1828d3a.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst startButton = document.querySelector('.start');\nconst gameField = document.querySelector('.game-field');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nfunction updateBoardUI() {\n  const rows = gameField.querySelectorAll('.field-row');\n  const score = game.getScore();\n\n  document.querySelector('.game-score').textContent = score;\n\n  game.getState().forEach((row, rowIndex) => {\n    const cells = rows[rowIndex].querySelectorAll('.field-cell');\n\n    row.forEach((cellValue, colIndex) => {\n      const cell = cells[colIndex];\n\n      cell.textContent = '';\n      cell.className = 'field-cell';\n\n      if (cellValue !== 0) {\n        cell.textContent = cellValue;\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n    });\n  });\n}\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    updateBoardUI(game);\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startMessage.classList.add('hidden');\n  } else if (game.getStatus() === 'playing') {\n    game.restart();\n    updateBoardUI(game);\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    startMessage.classList.remove('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (keyboardEvent) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (keyboardEvent.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    default:\n      return;\n  }\n\n  if (game.win()) {\n    if (game.hasWon) {\n      winMessage.classList.remove('hidden');\n    }\n  }\n\n  if (!game.canMove()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  updateBoardUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    initialScore = 0,\n  ) {\n    this.board = initialState;\n    this.currentBoard = [...initialState];\n    this.initialScore = initialScore;\n    this.currentScore = initialScore;\n    this.status = 'idle';\n    this.hasWon = false;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slideTiles(columns) {\n    for (let col = 0; col < 4; col++) {\n      let column = columns[col];\n\n      column = this.combineTiles(column);\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n  }\n\n  combineTiles(tiles) {\n    const result = tiles.filter((tile) => tile !== 0);\n    let scoreChange = 0;\n\n    for (let i = 0; i < result.length - 1; i++) {\n      if (result[i] === result[i + 1]) {\n        result[i] *= 2;\n        result[i + 1] = 0;\n        scoreChange += result[i];\n      }\n    }\n\n    const newTiles = result\n      .filter((tile) => tile !== 0)\n      .concat([0, 0, 0, 0])\n      .slice(0, 4);\n\n    this.currentScore += scoreChange;\n\n    return newTiles;\n  }\n\n  cellsGroupedByColumn() {\n    const groupedColumns = [[], [], [], []];\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        groupedColumns[col].push(this.board[row][col]);\n      }\n    }\n\n    return groupedColumns;\n  }\n\n  cellsGroupedByRow() {\n    const groupedRows = [[], [], [], []];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        groupedRows[row].push(this.board[row][col]);\n      }\n    }\n\n    return groupedRows;\n  }\n\n  moveLeft() {\n    const previousState = JSON.stringify(this.board);\n    const rows = this.cellsGroupedByRow();\n\n    for (let rowIdx = 0; rowIdx < 4; rowIdx++) {\n      let row = rows[rowIdx];\n\n      row = this.combineTiles(row);\n      this.board[rowIdx] = row;\n    }\n\n    if (JSON.stringify(this.board) !== previousState) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    const previousState = JSON.stringify(this.board);\n    const rows = this.cellsGroupedByRow();\n\n    for (let rowIdx = 0; rowIdx < 4; rowIdx++) {\n      let row = rows[rowIdx].reverse();\n\n      row = this.combineTiles(row);\n      row.reverse();\n      this.board[rowIdx] = row;\n    }\n\n    if (JSON.stringify(this.board) !== previousState) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    const previousState = JSON.stringify(this.board);\n    const columns = this.cellsGroupedByColumn();\n\n    for (let col = 0; col < 4; col++) {\n      let column = columns[col];\n\n      column = this.combineTiles(column);\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n\n    if (JSON.stringify(this.board) !== previousState) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    const previousState = JSON.stringify(this.board);\n    const columns = this.cellsGroupedByColumn();\n\n    for (let col = 0; col < 4; col++) {\n      let column = columns[col].reverse();\n\n      column = this.combineTiles(column);\n      column.reverse();\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n\n    if (JSON.stringify(this.board) !== previousState) {\n      this.addRandomTile();\n    }\n  }\n\n  win() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.hasWon = true;\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  canMove() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return true;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  getScore() {\n    return this.currentScore;\n  }\n  getState() {\n    return this.board;\n  }\n  getStatus() {\n    return this.status;\n  }\n  start() {\n    this.currentBoard = JSON.parse(JSON.stringify(this.board));\n    this.currentScore = this.initialScore;\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = 'playing';\n  }\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.currentBoard = JSON.parse(JSON.stringify(this.board));\n    this.currentScore = this.initialScore;\n    this.status = 'idle';\n    this.hasWon = false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","initialScore","board","currentBoard","currentScore","status","hasWon","addRandomTile","emptyCells","row","length","col","push","randomCell","Math","floor","random","slideTiles","columns","column","combineTiles","tiles","result","filter","tile","scoreChange","i","newTiles","concat","slice","cellsGroupedByColumn","groupedColumns","cellsGroupedByRow","groupedRows","moveLeft","previousState","JSON","stringify","rows","rowIdx","moveRight","reverse","moveUp","moveDown","win","canMove","getScore","getState","getStatus","start","parse","restart","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$updateBoardUI","querySelectorAll","score","textContent","forEach","rowIndex","cells","cellValue","colIndex","cell","className","classList","add","addEventListener","remove","keyboardEvent","key"],"version":3,"file":"index.e1828d3a.js.map"}